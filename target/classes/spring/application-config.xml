<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     					 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     				     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
     					 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    				     http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    				     http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd">

	<!-- 注解方式开下面这个节点 -->
	<!-- 
	<aop:aspectj-autoproxy />
	 -->
	<task:annotation-driven/>
	<context:annotation-config/>
	  	 
	<bean id="springIoc" class="com.mosai.vliveshow.core.ioc.SpringIoc" lazy-init="false" />
	<!-- 引入配置文件方式1 -->
	<context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties,classpath:application.properties" ignore-unresolvable="true" />

	<context:component-scan base-package="com.mosai.vliveshow">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.scheduling.annotation.EnableScheduling"/>
	</context:component-scan>
	
	<!-- database配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="2" />
		<property name="maxPoolSize" value="5" />
		<property name="minPoolSize" value="3" />
		<property name="maxIdleTime" value="1800" />
		<property name="maxStatements" value="0" />
		<property name="idleConnectionTestPeriod" value="1800" />
		<property name="preferredTestQuery" value="select 1"/>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- spring事务配置（事务传播、隔离级别） -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
		    <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
	       <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
	       <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
	       <tx:method name="update*" propagation="REQUIRED" read-only="false" />
	       <tx:method name="save*" propagation="REQUIRED" read-only="false" />
	       <tx:method name="insert*" propagation="REQUIRED" read-only="false" />
	       <tx:method name="delete*" propagation="REQUIRED" read-only="false" />
	        <tx:method name="reset*" propagation="REQUIRED" read-only="false"/>
	    </tx:attributes>
	</tx:advice>
	
	
	<!--AOP 处理类Bean配置 DEMO -->
	<!-- 	
	<bean id="aopLog" class="com.mosai.vliveshow.api.app.interfaces.aop.AopLog"></bean>  
	<bean id="aopLogAspect" class="com.mosai.vliveshow.api.app.interfaces.aop.AopLogAspect"></bean>  
	<aop:config>
		<aop:pointcut expression="execution(* com.mosai.vliveshow.application..*.*(..))" id="pointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
	</aop:config>
 	-->
	<!-- spring和mybatis完美整合，不需要配置mybatis的配置映射文件；加载mybatis配置文件xml -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath*:mybatis/mappers/**/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- mybatis.mapper方式 -->
	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mosai.vliveshow.datachannel.repository" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- fasddfs、mongo、es配置 -->
	<bean id="storageClient" class="com.mosai.vliveshow.core.storage.fastdfs.StorageClientFactoryBean">
		<property name="configLocation" value="classpath:fdfs_client.conf" />
	</bean>
	<import resource="classpath:mongodb/mongodb-config.xml" />
	<import resource="classpath:elasticsearch/es-context.xml"/>
	
	<!-- redis 单机配置-->
	<!-- 
	<bean class="com.mosai.vliveshow.datachannel.repository.cache.impl.RedisCacheOperations" destroy-method="destroy">
	    <constructor-arg name="poolConfig">
	        <bean class="redis.clients.jedis.JedisPoolConfig">
	            <property name="maxIdle" value="${redis.pool.maxIdle}"/>
	            <property name="minIdle" value="${redis.pool.minIdle}"/>
	        </bean>
	    </constructor-arg>
	    <constructor-arg name="host" value="${redis.host}"/>
	    <constructor-arg name="port" value="${redis.port}"/>
	</bean> 
	-->
	<!-- redis集群配置 -->
	<!-- 
	<bean name="cacheRepository" class="com.mosai.vliveshow.datachannel.repository.cache.impl.RedisClusterCacheOperations" destroy-method="destroy">
	    <constructor-arg name="poolConfig">
	        <bean class="redis.clients.jedis.JedisPoolConfig">
	            <property name="maxIdle" value="${redis.pool.maxIdle}"/>
	            <property name="minIdle" value="${redis.pool.minIdle}"/>
	        </bean>
	    </constructor-arg>
	    <constructor-arg name="timeout" value="2000"/> 
	    <constructor-arg name="hosts" value="${redis.cluster.hosts}"/>
	</bean>
	 -->
	<!-- token实现 -->
	<!-- 
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="com.mosai.vliveshow.application.helper.TokenSecurityHelper.initStaticField" />
		<property name="arguments" ref="tokenSecurityServiceImpl"/>
	</bean>
	 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="locale/messages"/>
	</bean>
	<!-- 实现定时任务（机器人注册）-->
	<!-- 
	<bean id="myScheduler"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="myTriggersA"></ref>
            </list>
        </property>
        <property name="autoStartup" value="true"></property>
    </bean>
    
    <bean id="myTriggersA"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="myJobDetailA">
        </property>
        <property name="cronExpression">
            <value>0 17 16 * * ?</value>
        </property>
    </bean>
    
       <bean id="myJobDetailA"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="myJobA">
        </property>
        <property name="targetMethod" value="newRobot"></property>
        <property name="concurrent" value="false" />
    </bean>
 	-->
    <bean id="myJobA" class="com.mosai.vliveshow.api.app.infrastructure.helper.AutoRobotHelper">
    </bean>
    <!-- 实现mybatis拦截器 -->
    <plugins>
    	<plugin interceptor="jerry.TestInterceptor">
    		<property name="property" value="拦截器配置"></property>
    	</plugin>
    </plugins>
</beans>
